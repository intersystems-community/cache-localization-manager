<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CLM.Broker">
<Super>%CSP.REST,CLM.Common</Super>
<TimeCreated>63714,58855.014604</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
	<Route Url="/test" Method="POST" Call="Test"/>
	<Route Url="/messages" Method="GET" Call="GetMessages"/>
	<Route Url="/messages" Method="PUT" Call="PutMessage"/>
	<Route Url="/messages" Method="POST" Call="PostMessage"/>
	<Route Url="/namespaces" Method="GET" Call="GetNamespaces"/>
	<Route Url="/current-namespace" Method="GET" Call="CurrentNamespace"/>
	<Route Url="/namespace/:namespace" Method="POST" Call="ChangeNamespace"/>
	<Route Url="/test" Method="POST" Call="Test"/>
	<Route Url="/add-new-localization" Method="POST" Call="AddNewLocalization"/>
	<Route Url="/export/:domain/:language" Method="GET" Call="DownloadDomain"/>
	<Route Url="/delete-language/:domain/:language" Method="GET" Call="DeleteLanguage"/>
	<Route Url="/import" Method="POST" Call="UploadDomain"/>
	<Route Url="/paths" Method="GET" Call="SetPaths"/>
 	<Route Url="/domains" Method="GET" Call="GetDomains"/>
 	<Route Url="/get-paths" Method="GET" Call="GetPaths"/>
</Routes>
]]></Data>
</XData>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	q $$$OK
]]></Implementation>
</Method>

<Method name="GetDomains">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "application/json"
	do ##class(CLM.Utils).GetGlobalStructure(,.result,)
	do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(result,,"aeltow")
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetMessages">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "application/json"
	
	set domain = %request.Data("domain", 1)
	set language = %request.Data("language", 1)
	set spellcheck = %request.Data("spellcheck", 1)
	if (spellcheck = "true") {
		return ##class(CLM.Utils).CheckMessages(domain, language, $$$MessageDictionaryGlobal(%session.SessionId))
	} else {
		return ##class(CLM.Utils).GetMessageList(domain, language, $$$MessageDictionaryGlobal(%session.SessionId))
	}
]]></Implementation>
</Method>

<Method name="ChangeNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (##class(%SYS.Namespace).Exists(namespace))
	{
	 	do ##class(CLM.Utils).ChangeNamespace(namespace)
	 	return $$$OK
	}
	else { return $$$ERROR($$$GeneralError,"Namespace " _ namespace _ " does not exist") }
]]></Implementation>
</Method>

<Method name="SetPaths">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "application/json"
	
	if $data(%request.Data("CNAPath", 1)){
		set CNAPath = %request.Data("CNAPath", 1)
 	}
 	if $data(%request.Data("hunspellPath", 1)){
	 	set hunspellPath = %request.Data("hunspellPath", 1)
 	}
 	if $data(%request.Data("libcPath", 1)){
		set libcPath = %request.Data("libcPath", 1)
 	}		
 	if $data(%request.Data("affPath", 1)){
		set affPath = %request.Data("affPath", 1)
 	}		
 	if $data(%request.Data("dicPath", 1)){
		set dicPath = %request.Data("dicPath", 1)
 	}
 	if $data(%request.Data("yandexkey", 1)){
		set yandexkey = %request.Data("yandexkey", 1)
 	}
		
	
	do ##class(CLM.Utils).SetPaths(CNAPath, hunspellPath, libcPath, affPath, dicPath, yandexkey)
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetPaths">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(CLM.Utils).GetPaths()
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetNamespaces">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ return ##class(CLM.Utils).GetNamespaceList()
]]></Implementation>
</Method>

<Method name="PutMessage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domain = %request.Data("domain", 1)
	set language = %request.Data("language", 1)
	set id = %request.Data("id", 1)
	set text = %request.Data("text", 1)
	return ##class(CLM.Utils).PutMessage(domain, language, id, text, $$$MessageDictionaryGlobal(%session.SessionId))
]]></Implementation>
</Method>

<Method name="PostMessage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domain = $$$R("Domain") 
	set messages = $$$R("Messages")
	return ##class(CLM.Utils).PostMessages(domain, messages, $$$MessageDictionaryGlobal(%session.SessionId))
]]></Implementation>
</Method>

<Method name="AddNewLocalization">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set domain = %request.Data("domain", 1)
	set from = %request.Data("from", 1)
	set to = %request.Data("to", 1)
	
	return ##class(CLM.Utils).AddNewLocalization($EXTRACT(from, 1, 2), to, domain)
]]></Implementation>
</Method>

<Method name="DownloadDomain">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	return:'##class(CLM.Utils).DomainExists(domain) $$$ERROR($$$GeneralError,"Domain " _ domain _ "does not exist")
	#dim %request As %CSP.Request
	set filename = ##class(%File).TempFilename("xml")
	do ##class(%MessageDictionary).ExportDomainList(filename, domain, language)
	set oid = ##class(%CSP.StreamServer).GetOidForFile(filename)
	set encoid = ..Encrypt(oid)
	do %request.Set("STREAMOID",encoid)
	if ##class(%CSP.StreamServer).OnPreHTTP() {
		set %response.Headers("Content-Disposition")="attachment; filename*=UTF-8''"_..EscapeURL(domain_language_".xml","UTF8")
	}
	set st = ##class(%CSP.StreamServer).OnPage()
	do ##class(%File).Delete(filename)
	return st
]]></Implementation>
</Method>

<Method name="UploadDomain">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set CurrentNs = $namespace
	zn $p(##class(CLM.Utils).GetCurrentNamespace(),"""",4)
	#dim %request As %CSP.Request
	set filename = ##class(%File).TempFilename("xml")
	set stream = %request.Content
	if $IsObject(stream) {
		set file=##class(%Stream.FileBinary).%New()
		set file.Filename=filename
		set st = file.CopyFromAndSave(stream)
		return:$$$ISERR(st) st
		do file.%Close()
		set st = ##class(%MessageDictionary).Import(filename)
		do ##class(%File).Delete(filename)
	} else {
		set st = $$$ERROR($$$GeneralError, "MimeData 'file' is not a file")
	}
	zn CurrentNs
	quit st
]]></Implementation>
</Method>

<Method name="DeleteLanguage">
<ClassMethod>1</ClassMethod>
<FormalSpec>domain:%String,language:%String,global:%String=$$$MessageDictionaryGlobal(%session.SessionId)</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ return ##class(CLM.Utils).DeleteLanguage(domain, language, global)
]]></Implementation>
</Method>

<Method name="CurrentNamespace">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w ##class(CLM.Utils).GetCurrentNamespace()
	return $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
